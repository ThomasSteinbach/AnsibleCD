<?xml version='1.0' encoding='UTF-8'?>
<com.cloudbees.plugins.credentials.SystemCredentialsProvider plugin="credentials@1.24">
  <domainCredentialsMap class="hudson.util.CopyOnWriteMap$Hash">
    <entry>
      <com.cloudbees.plugins.credentials.domains.Domain>
        <specifications/>
      </com.cloudbees.plugins.credentials.domains.Domain>
      <java.util.concurrent.CopyOnWriteArrayList>
        {% for item in aci_repository %}
        {% if item.id_rsa is defined %}
        <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.11">
          <scope>GLOBAL</scope>
          <id>{{ item.group + (item.name | default('')) }}</id>
          <description></description>
          <username>{{ item.group + (item.name | default('')) }}-key</username>
          <passphrase></passphrase>
          <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$FileOnMasterPrivateKeySource">
            <privateKeyFile>/var/jenkins_home/.ssh/{{ item.group + (item.name | default('')) }}/id_rsa</privateKeyFile>
          </privateKeySource>
        </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
        {% elif item.password is defined %}
        <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
          <scope>GLOBAL</scope>
          <id>{{ item.group + (item.name | default('')) }}</id>
          <description></description>
          <username>{{ item.username }}</username>
          <password>{{ lookup('password', '/tmp/' + item.name + '.pass chars=ascii_letters,digits length=8') + ':' + (item.password + '{' + lookup('password', '/tmp/' + item.group + '.pass chars=ascii_letters,digits length=8') + '}')|hash('sha256') }}</password>
        </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
        {% endif %}
        {% endfor %}
      </java.util.concurrent.CopyOnWriteArrayList>
    </entry>
  </domainCredentialsMap>
</com.cloudbees.plugins.credentials.SystemCredentialsProvider>
