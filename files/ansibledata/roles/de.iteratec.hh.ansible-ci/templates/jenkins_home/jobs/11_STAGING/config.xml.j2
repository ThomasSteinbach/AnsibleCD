<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>NODE</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>12_DEPLOY_STAGING</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>{{ item.url }}</url>
        <credentialsId>{{ item.group + (item.name | default('')) }}</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/{{ item.branch_staging }}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H/5 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>${JENKINS_HOME}/workspace/staging/{{ item.group }}</customWorkspace>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.42">
      <scriptText>
def playbooksDir = new java.io.File(&apos;/var/jenkins_home/workspace/staging/{{ item.group }}/{{ item.name | default(item.url | basename) }}{{ ('/' + item.subpath_playbooks) if item.subpath_playbooks is defined else '' }}&apos;)

playbooksDir.eachFile() { file -&gt; createPlaybookCheck(file) }

void createPlaybookCheck(File playbookDir){
  def playbookFile = new java.io.File(playbookDir.getAbsolutePath() + &apos;/site.yml&apos;)
  def playbooksDefinitionFile = new java.io.File(playbookDir.getAbsolutePath() + &apos;/aci/playbooks&apos;)
  def inventoryFile = new java.io.File(playbookDir.getAbsolutePath() + &apos;/aci/pre-live/inventory&apos;)

  if((playbookFile.exists() || playbooksDefinitionFile.exists()) &amp;&amp; inventoryFile.exists()){
    job(&apos;PL_{{ item.group }}_&apos; + playbookDir.getName()){

      scm {
        git {
            remote {
                url(&apos;{{ item.url }}&apos;)
                credentials(&apos;{{ item.group + (item.name | default('')) }}&apos;)
            }
            branch(&apos;*/{{ item.branch_staging }}&apos;)
            clean()

            configure { node -&gt;
              node / &apos;extensions&apos; {
                &apos;hudson.plugins.git.extensions.impl.SparseCheckoutPaths&apos; {
                  &apos;sparseCheckoutPaths&apos; {
                    &apos;hudson.plugins.git.extensions.impl.SparseCheckoutPath&apos; {
           				 path(&apos;{{ (item.subpath_playbooks + '/') if item.subpath_playbooks is defined else '' }}&apos; + playbookDir.getName())
                    }
                  }
                }
                &apos;hudson.plugins.git.extensions.impl.PathRestriction&apos; {
                  includedRegions(&apos;{{ (item.subpath_playbooks + '/') if item.subpath_playbooks is defined else '' }}&apos; + playbookDir.getName() + &apos;/.*&apos;)
                }
      		  }
            }
        }
      }

      triggers {
        scm(&apos;H/5 * * * *&apos;)
      }

      configure { project -&gt;
        project /
        builders /
        &apos;hudson.plugins.parameterizedtrigger.TriggerBuilder&apos;(plugin: &quot;parameterized-trigger@2.30&quot;) /
        configs /
        &apos;hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig&apos; &lt;&lt; {
          configs {
            &apos;hudson.plugins.parameterizedtrigger.PredefinedBuildParameters&apos; {
              properties(&apos;REPO_LABEL={{ item.group }}\nARTIFACTS_PATH={{ item.subpath_playbooks if item.subpath_playbooks is defined else '.' }}\nARTIFACT_NAME=&apos; + playbookDir.getName() + &apos;\nROLES_PATH={% for rpath in (item.roles_path_from | default([item.group])) %}/var/jenkins_home/workspace/staging/{{ rpath }}{{ ('/' + aci_repository|selectattr("group","equalto",rpath)|map(attribute='subpath_roles')|first) if (aci_repository|selectattr("group","equalto",rpath)|selectattr("subpath_roles","defined")|list|length) > 0 else '' }}:{% endfor %}&apos;)
            }
          }
          projects(&apos;12_DEPLOY_STAGING&apos;)
          condition(&apos;ALWAYS&apos;)
       	  block {
            buildStepFailureThreshold {
              ordinal(2)
          	  }
            unstableThreshold {
              ordinal(1)
          	  }
            failureThreshold {
              ordinal(2)
          	  }
       		}
          }
   		}

      publishers {
        mailer('', false, true)
      }
    }
  }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <removedJobAction>DELETE</removedJobAction>
      <removedViewAction>DELETE</removedViewAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
      <additionalClasspath></additionalClasspath>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
